generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES")
}

model Designer {
  id   Int    @id @default(autoincrement())
  slug String @unique
  name String

  lines      Line[]
  fragrances Fragrance[]
}

model Line {
  id   Int    @id @default(autoincrement())
  slug String @unique
  name String

  fragrances Fragrance[]

  designer   Designer @relation(fields: [designerId], references: [id])
  designerId Int
}

model Fragrance {
  id   Int    @id @default(autoincrement())
  slug String @unique
  name String

  fragranceToNote FragranceToNote[]

  ownedBy  User[] @relation("own")
  wantedBy User[] @relation("want")
  votes    Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  designer   Designer @relation(fields: [designerId], references: [id])
  designerId Int
  line       Line     @relation(fields: [lineId], references: [id])
  lineId     Int
}

model Note {
  id   Int    @id @default(autoincrement())
  slug String @unique
  name String

  fragranceToNote FragranceToNote[]
}

model FragranceToNote {
  id   Int    @id @default(autoincrement())
  type String
  name String

  fragrance   Fragrance @relation(fields: [fragranceId], references: [id])
  fragranceId Int
  note        Note      @relation(fields: [noteId], references: [id])
  noteId      Int
}

model Vote {
  id Int @id @default(autoincrement())

  rating    Int
  longevity Int
  sillage   Int

  user        User      @relation(fields: [userId], references: [id])
  userId      String
  fragrance   Fragrance @relation(fields: [fragranceId], references: [id])
  fragranceId Int

  @@unique([userId, fragranceId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username String @unique @default(uuid())
  role     String @default("user")

  owns  Fragrance[] @relation("own")
  wants Fragrance[] @relation("want")
  votes Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
